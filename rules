rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    function signedIn()      { return request.auth != null; }
    function isAdmin()       { return signedIn() && exists(/databases/$(db)/documents/admins/$(request.auth.uid)); }
    function isBanned()      { return signedIn() && exists(/databases/$(db)/documents/bans/$(request.auth.uid)); }
    function ownerOf(d)      { return (('ownerUid' in d) ? d.ownerUid : (('uid' in d) ? d.uid : null)); }
    function isOwnerOrAdmin(d){ return signedIn() && (request.auth.uid == ownerOf(d) || isAdmin()); }

    match /users/{uid} {
      allow read: if true;
      allow create: if signedIn() && request.auth.uid == uid && !isBanned();
      allow update, delete: if isAdmin();
    }

    match /nicknames/{name} {
      allow read: if true;
      allow create: if signedIn() && !isBanned()
        && !exists(/databases/$(db)/documents/nicknames/$(name))
        && request.resource.data.keys().hasOnly(['uid'])
        && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    match /videos/{id} {
      allow read: if true;
      allow create: if signedIn() && !isBanned()
        && request.resource.data.ownerUid == request.auth.uid
        && request.resource.data.keys().hasAll(['ownerUid','ownerNick','url','title','category','createdAt'])
        && request.resource.data.url.matches('^https://(www\\.)?(youtube\\.com|youtu\\.be)/.*');
      allow update: if isOwnerOrAdmin(resource.data)
        && !isBanned()
        && request.resource.data.ownerUid == resource.data.ownerUid
        && request.resource.data.ownerNick == resource.data.ownerNick;
      allow delete: if isOwnerOrAdmin(resource.data) && !isBanned();
    }

    match /admins/{uid} { allow read: if isAdmin(); allow create, update, delete: if isAdmin(); }
    match /bans/{uid}   { allow read: if isAdmin(); allow create, update, delete: if isAdmin(); }
  }
}
